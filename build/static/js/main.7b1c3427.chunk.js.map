{"version":3,"sources":["debounce.js","Editor.js","App.js","serviceWorker.js","index.js"],"names":["debounce","f","timeout","interval","arguments","length","undefined","_len","args","Array","_key","clearTimeout","setTimeout","apply","WEB_SOCKET_URL","window","location","protocol","replace","host","contentWithCodeBlock","text","convertFromRaw","entityMap","blocks","type","Editor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendContent","state","out","send","editor","getCurrentContent","getPlainText","sameContent","content","handleReceive","_ref","data","setState","EditorState","moveFocusToEnd","push","handleChange","handleTab","e","Code","hasSelectionInBlock","onTab","createWithContent","in","WebSocket","onmessage","react_default","a","createElement","className","Draft","editorState","onChange","Component","App","src_Editor_0","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAAeA,EAAA,SAACC,GAAsB,IAChCC,EADaC,EAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAR,IAG5B,OAAO,WAAa,QAAAG,EAAAH,UAAAC,OAATG,EAAS,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATF,EAASE,GAAAN,UAAAM,GAClBC,aAAaT,GACbA,EAAUU,WAAW,kBAAMX,EAACY,WAAD,EAAKL,IAAOL,KCOrCW,UAAiBC,OAAOC,SAASC,SAASC,QAAQ,OAAQ,MAAQ,KAAOH,OAAOC,SAASG,MAEzFC,EAAuB,SAAAC,GAAI,OAAIC,yBAAe,CAClDC,UAAW,GACXC,OAAQ,CAAC,CAAEC,KAAM,aAAcJ,YAgElBK,cA5Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaFI,YAAc,WACZP,EAAKQ,MAAMC,IAAIC,KAAKV,EAAKQ,MAAMG,OAAOC,oBAAoBC,iBAf9Cb,EAkBdc,YAAc,SAAAC,GACZ,OAAOf,EAAKQ,MAAMG,OAAOC,oBAAoBC,iBAAmBE,GAnBpDf,EAsBdgB,cAAgB,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACZlB,EAAKc,YAAYI,IACpBlB,EAAKmB,SAAS,CACZR,OAAQS,cAAYC,eAAeD,cAAYE,KAC7CtB,EAAKQ,MAAMG,OACXlB,EAAqByB,QA3BflB,EAiCduB,aAAe,SAAAZ,GACbX,EAAKmB,SAAS,CAAER,UAAUtC,EAAS2B,EAAKO,eAlC5BP,EAqCdwB,UAAY,SAAAC,GAAK,IACPd,EAAWX,EAAKQ,MAAhBG,OAER,QAAKe,IAAKC,oBAAoBhB,KAE9BX,EAAKuB,aAAaG,IAAKE,MAAMH,EAAGd,KAEzB,IAzCPX,EAAKQ,MAAQ,CACXG,OAAQS,cAAYS,kBAAkBpC,EAAqB,KAC3DqC,GAAI,IAAIC,UAAU5C,EAAiB,YACnCsB,IAAK,IAAIsB,UAAU5C,EAAiB,YAN1Ba,mFAWZG,KAAKK,MAAMsB,GAAGE,UAAY7B,KAAKa,+CAqC/B,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,YAAanC,KAAKK,MAAMG,OACxB4B,SAAUpC,KAAKoB,aACfK,MAAOzB,KAAKqB,oBAtDDgB,aCNNC,mLARX,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACO,EAAD,cAJUF,aCOEG,QACW,cAA7BvD,OAAOC,SAASuD,UAEe,UAA7BxD,OAAOC,SAASuD,UAEhBxD,OAAOC,SAASuD,SAASC,MACvB,2DCVNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b1c3427.chunk.js","sourcesContent":["export default (f, interval = 250) => {\n  let timeout;\n\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => f(...args), interval);\n  };\n};\n","import React, { Component } from 'react';\nimport Code from 'draft-js-code';\nimport {\n  Editor as DraftEditor,\n  EditorState,\n  ContentState,\n  convertFromRaw\n} from 'draft-js';\nimport debounce from './debounce';\n\nimport './Editor.css';\n\nconst WEB_SOCKET_URL = window.location.protocol.replace('http', 'ws') + '//' + window.location.host;\n\nconst contentWithCodeBlock = text => convertFromRaw({\n  entityMap: {},\n  blocks: [{ type: 'code-block', text }]\n});\n\nclass Editor extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      editor: EditorState.createWithContent(contentWithCodeBlock('')),\n      in: new WebSocket(WEB_SOCKET_URL + '/receive'),\n      out: new WebSocket(WEB_SOCKET_URL + '/submit')\n    };\n  }\n\n  componentDidMount() {\n    this.state.in.onmessage = this.handleReceive;\n  }\n\n  sendContent = () => {\n    this.state.out.send(this.state.editor.getCurrentContent().getPlainText());\n  };\n\n  sameContent = content => {\n    return this.state.editor.getCurrentContent().getPlainText() === content;\n  };\n\n  handleReceive = ({ data }) => {\n    if (!this.sameContent(data)) {\n      this.setState({\n        editor: EditorState.moveFocusToEnd(EditorState.push(\n          this.state.editor,\n          contentWithCodeBlock(data)\n        ))\n      });\n    }\n  };\n\n  handleChange = editor => {\n    this.setState({ editor }, debounce(this.sendContent));\n  };\n\n  handleTab = e => {\n    const { editor } = this.state;\n\n    if (!Code.hasSelectionInBlock(editor)) return false;\n\n    this.handleChange(Code.onTab(e, editor));\n\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"editor\">\n        <DraftEditor\n          editorState={this.state.editor}\n          onChange={this.handleChange}\n          onTab={this.handleTab}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n","import React, { Component } from 'react';\nimport Editor from './Editor';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}